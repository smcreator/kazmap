//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region Метаданные связи EDM

[assembly: EdmRelationshipAttribute("KazMapContext", "FK_Intersections_NodeId_Nodes", "Nodes", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(KazMap.Data.Nodes), "Intersections", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(KazMap.Data.Intersections), true)]
[assembly: EdmRelationshipAttribute("KazMapContext", "FK_Path_LeftIntersectionId_Intersections", "Intersections", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(KazMap.Data.Intersections), "Path", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(KazMap.Data.Path), true)]
[assembly: EdmRelationshipAttribute("KazMapContext", "FK_Path_RightIntersectionId_Intersections", "Intersections", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(KazMap.Data.Intersections), "Path", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(KazMap.Data.Path), true)]
[assembly: EdmRelationshipAttribute("KazMapContext", "FK_NodeTags_NodeId_Nodes", "Nodes", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(KazMap.Data.Nodes), "NodeTags", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(KazMap.Data.NodeTags), true)]
[assembly: EdmRelationshipAttribute("KazMapContext", "FK_Path_LeftNodeId_Nodes", "Nodes", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(KazMap.Data.Nodes), "Path", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(KazMap.Data.Path), true)]
[assembly: EdmRelationshipAttribute("KazMapContext", "FK_Path_RightNodeId_Nodes", "Nodes", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(KazMap.Data.Nodes), "Path", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(KazMap.Data.Path), true)]
[assembly: EdmRelationshipAttribute("KazMapContext", "FK_WayNodes_NodeId_Nodes", "Nodes", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(KazMap.Data.Nodes), "WayNodes", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(KazMap.Data.WayNodes), true)]
[assembly: EdmRelationshipAttribute("KazMapContext", "FK_NodeTags_TypeId_TagTypes", "TagTypes", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(KazMap.Data.TagTypes), "NodeTags", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(KazMap.Data.NodeTags), true)]
[assembly: EdmRelationshipAttribute("KazMapContext", "FK_Path_RoadId_Roads", "Roads", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(KazMap.Data.Roads), "Path", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(KazMap.Data.Path), true)]
[assembly: EdmRelationshipAttribute("KazMapContext", "FK_RelationNodes_RelationId_Relations", "Relations", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(KazMap.Data.Relations), "RelationNodes", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(KazMap.Data.RelationNodes), true)]
[assembly: EdmRelationshipAttribute("KazMapContext", "FK_RelationNodes_TypeId_TagTypes", "TagTypes", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(KazMap.Data.TagTypes), "RelationNodes", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(KazMap.Data.RelationNodes), true)]
[assembly: EdmRelationshipAttribute("KazMapContext", "FK_RelationTags_RelationId_Relations", "Relations", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(KazMap.Data.Relations), "RelationTags", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(KazMap.Data.RelationTags), true)]
[assembly: EdmRelationshipAttribute("KazMapContext", "FK_RelationTags_TypeId_TagTypes", "TagTypes", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(KazMap.Data.TagTypes), "RelationTags", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(KazMap.Data.RelationTags), true)]
[assembly: EdmRelationshipAttribute("KazMapContext", "FK_Roads_WayId_Ways", "Ways", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(KazMap.Data.Ways), "Roads", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(KazMap.Data.Roads), true)]
[assembly: EdmRelationshipAttribute("KazMapContext", "FK_WayTags_TypeId_TagTypes", "TagTypes", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(KazMap.Data.TagTypes), "WayTags", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(KazMap.Data.WayTags), true)]
[assembly: EdmRelationshipAttribute("KazMapContext", "FK_WayNodes_WayId_Ways", "Ways", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(KazMap.Data.Ways), "WayNodes", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(KazMap.Data.WayNodes), true)]
[assembly: EdmRelationshipAttribute("KazMapContext", "FK_WayTags_WayId_Ways", "Ways", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(KazMap.Data.Ways), "WayTags", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(KazMap.Data.WayTags), true)]
[assembly: EdmRelationshipAttribute("KazMapContext", "FK_WayNamesReferences_NameId_WayNames", "WayNames", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(KazMap.Data.WayNames), "WayNamesReferences", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(KazMap.Data.WayNamesReferences), true)]
[assembly: EdmRelationshipAttribute("KazMapContext", "FK_WayNamesReferences_WayId_Ways", "Ways", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(KazMap.Data.Ways), "WayNamesReferences", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(KazMap.Data.WayNamesReferences), true)]

#endregion

namespace KazMap.Data
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class KazMapEntities : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект KazMapEntities, используя строку соединения из раздела "KazMapEntities" файла конфигурации приложения.
        /// </summary>
        public KazMapEntities() : base("name=KazMapEntities", "KazMapEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта KazMapEntities.
        /// </summary>
        public KazMapEntities(string connectionString) : base(connectionString, "KazMapEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта KazMapEntities.
        /// </summary>
        public KazMapEntities(EntityConnection connection) : base(connection, "KazMapEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Intersections> Intersections
        {
            get
            {
                if ((_Intersections == null))
                {
                    _Intersections = base.CreateObjectSet<Intersections>("Intersections");
                }
                return _Intersections;
            }
        }
        private ObjectSet<Intersections> _Intersections;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Nodes> Nodes
        {
            get
            {
                if ((_Nodes == null))
                {
                    _Nodes = base.CreateObjectSet<Nodes>("Nodes");
                }
                return _Nodes;
            }
        }
        private ObjectSet<Nodes> _Nodes;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<NodeTags> NodeTags
        {
            get
            {
                if ((_NodeTags == null))
                {
                    _NodeTags = base.CreateObjectSet<NodeTags>("NodeTags");
                }
                return _NodeTags;
            }
        }
        private ObjectSet<NodeTags> _NodeTags;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Path> Path
        {
            get
            {
                if ((_Path == null))
                {
                    _Path = base.CreateObjectSet<Path>("Path");
                }
                return _Path;
            }
        }
        private ObjectSet<Path> _Path;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<RelationNodes> RelationNodes
        {
            get
            {
                if ((_RelationNodes == null))
                {
                    _RelationNodes = base.CreateObjectSet<RelationNodes>("RelationNodes");
                }
                return _RelationNodes;
            }
        }
        private ObjectSet<RelationNodes> _RelationNodes;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Relations> Relations
        {
            get
            {
                if ((_Relations == null))
                {
                    _Relations = base.CreateObjectSet<Relations>("Relations");
                }
                return _Relations;
            }
        }
        private ObjectSet<Relations> _Relations;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<RelationTags> RelationTags
        {
            get
            {
                if ((_RelationTags == null))
                {
                    _RelationTags = base.CreateObjectSet<RelationTags>("RelationTags");
                }
                return _RelationTags;
            }
        }
        private ObjectSet<RelationTags> _RelationTags;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Roads> Roads
        {
            get
            {
                if ((_Roads == null))
                {
                    _Roads = base.CreateObjectSet<Roads>("Roads");
                }
                return _Roads;
            }
        }
        private ObjectSet<Roads> _Roads;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<TagTypes> TagTypes
        {
            get
            {
                if ((_TagTypes == null))
                {
                    _TagTypes = base.CreateObjectSet<TagTypes>("TagTypes");
                }
                return _TagTypes;
            }
        }
        private ObjectSet<TagTypes> _TagTypes;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WayNodes> WayNodes
        {
            get
            {
                if ((_WayNodes == null))
                {
                    _WayNodes = base.CreateObjectSet<WayNodes>("WayNodes");
                }
                return _WayNodes;
            }
        }
        private ObjectSet<WayNodes> _WayNodes;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Ways> Ways
        {
            get
            {
                if ((_Ways == null))
                {
                    _Ways = base.CreateObjectSet<Ways>("Ways");
                }
                return _Ways;
            }
        }
        private ObjectSet<Ways> _Ways;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WayTags> WayTags
        {
            get
            {
                if ((_WayTags == null))
                {
                    _WayTags = base.CreateObjectSet<WayTags>("WayTags");
                }
                return _WayTags;
            }
        }
        private ObjectSet<WayTags> _WayTags;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WayNames> WayNames
        {
            get
            {
                if ((_WayNames == null))
                {
                    _WayNames = base.CreateObjectSet<WayNames>("WayNames");
                }
                return _WayNames;
            }
        }
        private ObjectSet<WayNames> _WayNames;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WayNamesReferences> WayNamesReferences
        {
            get
            {
                if ((_WayNamesReferences == null))
                {
                    _WayNamesReferences = base.CreateObjectSet<WayNamesReferences>("WayNamesReferences");
                }
                return _WayNamesReferences;
            }
        }
        private ObjectSet<WayNamesReferences> _WayNamesReferences;

        #endregion
        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Intersections. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToIntersections(Intersections intersections)
        {
            base.AddObject("Intersections", intersections);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Nodes. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToNodes(Nodes nodes)
        {
            base.AddObject("Nodes", nodes);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet NodeTags. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToNodeTags(NodeTags nodeTags)
        {
            base.AddObject("NodeTags", nodeTags);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Path. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToPath(Path path)
        {
            base.AddObject("Path", path);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet RelationNodes. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToRelationNodes(RelationNodes relationNodes)
        {
            base.AddObject("RelationNodes", relationNodes);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Relations. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToRelations(Relations relations)
        {
            base.AddObject("Relations", relations);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet RelationTags. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToRelationTags(RelationTags relationTags)
        {
            base.AddObject("RelationTags", relationTags);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Roads. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToRoads(Roads roads)
        {
            base.AddObject("Roads", roads);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet TagTypes. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToTagTypes(TagTypes tagTypes)
        {
            base.AddObject("TagTypes", tagTypes);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WayNodes. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWayNodes(WayNodes wayNodes)
        {
            base.AddObject("WayNodes", wayNodes);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Ways. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWays(Ways ways)
        {
            base.AddObject("Ways", ways);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WayTags. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWayTags(WayTags wayTags)
        {
            base.AddObject("WayTags", wayTags);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WayNames. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWayNames(WayNames wayNames)
        {
            base.AddObject("WayNames", wayNames);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WayNamesReferences. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWayNamesReferences(WayNamesReferences wayNamesReferences)
        {
            base.AddObject("WayNamesReferences", wayNamesReferences);
        }

        #endregion
    }
    

    #endregion
    
    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="KazMapContext", Name="Intersections")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Intersections : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Intersections.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        public static Intersections CreateIntersections(global::System.Int64 id)
        {
            Intersections intersections = new Intersections();
            intersections.Id = id;
            return intersections;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> NodeId
        {
            get
            {
                return _NodeId;
            }
            set
            {
                OnNodeIdChanging(value);
                ReportPropertyChanging("NodeId");
                _NodeId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("NodeId");
                OnNodeIdChanged();
            }
        }
        private Nullable<global::System.Int64> _NodeId;
        partial void OnNodeIdChanging(Nullable<global::System.Int64> value);
        partial void OnNodeIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> AverageSpeed
        {
            get
            {
                return _AverageSpeed;
            }
            set
            {
                OnAverageSpeedChanging(value);
                ReportPropertyChanging("AverageSpeed");
                _AverageSpeed = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AverageSpeed");
                OnAverageSpeedChanged();
            }
        }
        private Nullable<global::System.Double> _AverageSpeed;
        partial void OnAverageSpeedChanging(Nullable<global::System.Double> value);
        partial void OnAverageSpeedChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("KazMapContext", "FK_Intersections_NodeId_Nodes", "Nodes")]
        public Nodes Node
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Nodes>("KazMapContext.FK_Intersections_NodeId_Nodes", "Nodes").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Nodes>("KazMapContext.FK_Intersections_NodeId_Nodes", "Nodes").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Nodes> NodeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Nodes>("KazMapContext.FK_Intersections_NodeId_Nodes", "Nodes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Nodes>("KazMapContext.FK_Intersections_NodeId_Nodes", "Nodes", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="KazMapContext", Name="Nodes")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Nodes : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Nodes.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        public static Nodes CreateNodes(global::System.Int64 id)
        {
            Nodes nodes = new Nodes();
            nodes.Id = id;
            return nodes;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> Longitude
        {
            get
            {
                return _Longitude;
            }
            set
            {
                OnLongitudeChanging(value);
                ReportPropertyChanging("Longitude");
                _Longitude = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Longitude");
                OnLongitudeChanged();
            }
        }
        private Nullable<global::System.Double> _Longitude;
        partial void OnLongitudeChanging(Nullable<global::System.Double> value);
        partial void OnLongitudeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> Latitude
        {
            get
            {
                return _Latitude;
            }
            set
            {
                OnLatitudeChanging(value);
                ReportPropertyChanging("Latitude");
                _Latitude = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Latitude");
                OnLatitudeChanged();
            }
        }
        private Nullable<global::System.Double> _Latitude;
        partial void OnLatitudeChanging(Nullable<global::System.Double> value);
        partial void OnLatitudeChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("KazMapContext", "FK_NodeTags_NodeId_Nodes", "NodeTags")]
        public EntityCollection<NodeTags> Tags
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<NodeTags>("KazMapContext.FK_NodeTags_NodeId_Nodes", "NodeTags");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<NodeTags>("KazMapContext.FK_NodeTags_NodeId_Nodes", "NodeTags", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="KazMapContext", Name="NodeTags")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class NodeTags : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта NodeTags.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        public static NodeTags CreateNodeTags(global::System.Int64 id)
        {
            NodeTags nodeTags = new NodeTags();
            nodeTags.Id = id;
            return nodeTags;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private global::System.String _Value;
        partial void OnValueChanging(global::System.String value);
        partial void OnValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> TypeId
        {
            get
            {
                return _TypeId;
            }
            set
            {
                OnTypeIdChanging(value);
                ReportPropertyChanging("TypeId");
                _TypeId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TypeId");
                OnTypeIdChanged();
            }
        }
        private Nullable<global::System.Int64> _TypeId;
        partial void OnTypeIdChanging(Nullable<global::System.Int64> value);
        partial void OnTypeIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> NodeId
        {
            get
            {
                return _NodeId;
            }
            set
            {
                OnNodeIdChanging(value);
                ReportPropertyChanging("NodeId");
                _NodeId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("NodeId");
                OnNodeIdChanged();
            }
        }
        private Nullable<global::System.Int64> _NodeId;
        partial void OnNodeIdChanging(Nullable<global::System.Int64> value);
        partial void OnNodeIdChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("KazMapContext", "FK_NodeTags_NodeId_Nodes", "Nodes")]
        public Nodes Node
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Nodes>("KazMapContext.FK_NodeTags_NodeId_Nodes", "Nodes").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Nodes>("KazMapContext.FK_NodeTags_NodeId_Nodes", "Nodes").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Nodes> NodeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Nodes>("KazMapContext.FK_NodeTags_NodeId_Nodes", "Nodes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Nodes>("KazMapContext.FK_NodeTags_NodeId_Nodes", "Nodes", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("KazMapContext", "FK_NodeTags_TypeId_TagTypes", "TagTypes")]
        public TagTypes Type
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TagTypes>("KazMapContext.FK_NodeTags_TypeId_TagTypes", "TagTypes").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TagTypes>("KazMapContext.FK_NodeTags_TypeId_TagTypes", "TagTypes").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TagTypes> TypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TagTypes>("KazMapContext.FK_NodeTags_TypeId_TagTypes", "TagTypes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<TagTypes>("KazMapContext.FK_NodeTags_TypeId_TagTypes", "TagTypes", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="KazMapContext", Name="Path")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Path : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Path.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        public static Path CreatePath(global::System.Int64 id)
        {
            Path path = new Path();
            path.id = id;
            return path;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int64 _id;
        partial void OnidChanging(global::System.Int64 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Weight
        {
            get
            {
                return _Weight;
            }
            set
            {
                OnWeightChanging(value);
                ReportPropertyChanging("Weight");
                _Weight = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Weight");
                OnWeightChanged();
            }
        }
        private Nullable<global::System.Int32> _Weight;
        partial void OnWeightChanging(Nullable<global::System.Int32> value);
        partial void OnWeightChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> RoadId
        {
            get
            {
                return _RoadId;
            }
            set
            {
                OnRoadIdChanging(value);
                ReportPropertyChanging("RoadId");
                _RoadId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RoadId");
                OnRoadIdChanged();
            }
        }
        private Nullable<global::System.Int64> _RoadId;
        partial void OnRoadIdChanging(Nullable<global::System.Int64> value);
        partial void OnRoadIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> LeftIntersectionId
        {
            get
            {
                return _LeftIntersectionId;
            }
            set
            {
                OnLeftIntersectionIdChanging(value);
                ReportPropertyChanging("LeftIntersectionId");
                _LeftIntersectionId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LeftIntersectionId");
                OnLeftIntersectionIdChanged();
            }
        }
        private Nullable<global::System.Int64> _LeftIntersectionId;
        partial void OnLeftIntersectionIdChanging(Nullable<global::System.Int64> value);
        partial void OnLeftIntersectionIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> RightIntersectionId
        {
            get
            {
                return _RightIntersectionId;
            }
            set
            {
                OnRightIntersectionIdChanging(value);
                ReportPropertyChanging("RightIntersectionId");
                _RightIntersectionId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RightIntersectionId");
                OnRightIntersectionIdChanged();
            }
        }
        private Nullable<global::System.Int64> _RightIntersectionId;
        partial void OnRightIntersectionIdChanging(Nullable<global::System.Int64> value);
        partial void OnRightIntersectionIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> LeftNodeId
        {
            get
            {
                return _LeftNodeId;
            }
            set
            {
                OnLeftNodeIdChanging(value);
                ReportPropertyChanging("LeftNodeId");
                _LeftNodeId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LeftNodeId");
                OnLeftNodeIdChanged();
            }
        }
        private Nullable<global::System.Int64> _LeftNodeId;
        partial void OnLeftNodeIdChanging(Nullable<global::System.Int64> value);
        partial void OnLeftNodeIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> RightNodeId
        {
            get
            {
                return _RightNodeId;
            }
            set
            {
                OnRightNodeIdChanging(value);
                ReportPropertyChanging("RightNodeId");
                _RightNodeId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RightNodeId");
                OnRightNodeIdChanged();
            }
        }
        private Nullable<global::System.Int64> _RightNodeId;
        partial void OnRightNodeIdChanging(Nullable<global::System.Int64> value);
        partial void OnRightNodeIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> Distance
        {
            get
            {
                return _Distance;
            }
            set
            {
                OnDistanceChanging(value);
                ReportPropertyChanging("Distance");
                _Distance = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Distance");
                OnDistanceChanged();
            }
        }
        private Nullable<global::System.Int64> _Distance;
        partial void OnDistanceChanging(Nullable<global::System.Int64> value);
        partial void OnDistanceChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("KazMapContext", "FK_Path_LeftIntersectionId_Intersections", "Intersections")]
        public Intersections LeftIntersection
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Intersections>("KazMapContext.FK_Path_LeftIntersectionId_Intersections", "Intersections").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Intersections>("KazMapContext.FK_Path_LeftIntersectionId_Intersections", "Intersections").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Intersections> LeftIntersectionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Intersections>("KazMapContext.FK_Path_LeftIntersectionId_Intersections", "Intersections");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Intersections>("KazMapContext.FK_Path_LeftIntersectionId_Intersections", "Intersections", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("KazMapContext", "FK_Path_RightIntersectionId_Intersections", "Intersections")]
        public Intersections RightIntersection
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Intersections>("KazMapContext.FK_Path_RightIntersectionId_Intersections", "Intersections").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Intersections>("KazMapContext.FK_Path_RightIntersectionId_Intersections", "Intersections").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Intersections> RightIntersectionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Intersections>("KazMapContext.FK_Path_RightIntersectionId_Intersections", "Intersections");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Intersections>("KazMapContext.FK_Path_RightIntersectionId_Intersections", "Intersections", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("KazMapContext", "FK_Path_LeftNodeId_Nodes", "Nodes")]
        public Nodes LeftNode
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Nodes>("KazMapContext.FK_Path_LeftNodeId_Nodes", "Nodes").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Nodes>("KazMapContext.FK_Path_LeftNodeId_Nodes", "Nodes").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Nodes> LeftNodeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Nodes>("KazMapContext.FK_Path_LeftNodeId_Nodes", "Nodes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Nodes>("KazMapContext.FK_Path_LeftNodeId_Nodes", "Nodes", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("KazMapContext", "FK_Path_RightNodeId_Nodes", "Nodes")]
        public Nodes RightNode
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Nodes>("KazMapContext.FK_Path_RightNodeId_Nodes", "Nodes").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Nodes>("KazMapContext.FK_Path_RightNodeId_Nodes", "Nodes").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Nodes> RightNodeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Nodes>("KazMapContext.FK_Path_RightNodeId_Nodes", "Nodes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Nodes>("KazMapContext.FK_Path_RightNodeId_Nodes", "Nodes", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("KazMapContext", "FK_Path_RoadId_Roads", "Roads")]
        public Roads Road
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Roads>("KazMapContext.FK_Path_RoadId_Roads", "Roads").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Roads>("KazMapContext.FK_Path_RoadId_Roads", "Roads").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Roads> RoadReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Roads>("KazMapContext.FK_Path_RoadId_Roads", "Roads");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Roads>("KazMapContext.FK_Path_RoadId_Roads", "Roads", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="KazMapContext", Name="RelationNodes")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RelationNodes : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта RelationNodes.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        public static RelationNodes CreateRelationNodes(global::System.Int64 id)
        {
            RelationNodes relationNodes = new RelationNodes();
            relationNodes.Id = id;
            return relationNodes;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ItemId
        {
            get
            {
                return _ItemId;
            }
            set
            {
                OnItemIdChanging(value);
                ReportPropertyChanging("ItemId");
                _ItemId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ItemId");
                OnItemIdChanged();
            }
        }
        private Nullable<global::System.Int64> _ItemId;
        partial void OnItemIdChanging(Nullable<global::System.Int64> value);
        partial void OnItemIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Position
        {
            get
            {
                return _Position;
            }
            set
            {
                OnPositionChanging(value);
                ReportPropertyChanging("Position");
                _Position = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Position");
                OnPositionChanged();
            }
        }
        private Nullable<global::System.Int32> _Position;
        partial void OnPositionChanging(Nullable<global::System.Int32> value);
        partial void OnPositionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> TypeId
        {
            get
            {
                return _TypeId;
            }
            set
            {
                OnTypeIdChanging(value);
                ReportPropertyChanging("TypeId");
                _TypeId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TypeId");
                OnTypeIdChanged();
            }
        }
        private Nullable<global::System.Int64> _TypeId;
        partial void OnTypeIdChanging(Nullable<global::System.Int64> value);
        partial void OnTypeIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> RelationId
        {
            get
            {
                return _RelationId;
            }
            set
            {
                OnRelationIdChanging(value);
                ReportPropertyChanging("RelationId");
                _RelationId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RelationId");
                OnRelationIdChanged();
            }
        }
        private Nullable<global::System.Int64> _RelationId;
        partial void OnRelationIdChanging(Nullable<global::System.Int64> value);
        partial void OnRelationIdChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("KazMapContext", "FK_RelationNodes_RelationId_Relations", "Relations")]
        public Relations Relation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Relations>("KazMapContext.FK_RelationNodes_RelationId_Relations", "Relations").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Relations>("KazMapContext.FK_RelationNodes_RelationId_Relations", "Relations").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Relations> RelationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Relations>("KazMapContext.FK_RelationNodes_RelationId_Relations", "Relations");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Relations>("KazMapContext.FK_RelationNodes_RelationId_Relations", "Relations", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("KazMapContext", "FK_RelationNodes_TypeId_TagTypes", "TagTypes")]
        public TagTypes Type
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TagTypes>("KazMapContext.FK_RelationNodes_TypeId_TagTypes", "TagTypes").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TagTypes>("KazMapContext.FK_RelationNodes_TypeId_TagTypes", "TagTypes").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TagTypes> TypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TagTypes>("KazMapContext.FK_RelationNodes_TypeId_TagTypes", "TagTypes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<TagTypes>("KazMapContext.FK_RelationNodes_TypeId_TagTypes", "TagTypes", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="KazMapContext", Name="Relations")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Relations : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Relations.
        /// </summary>
        /// <param name="relationId">Исходное значение свойства RelationId.</param>
        public static Relations CreateRelations(global::System.Int64 relationId)
        {
            Relations relations = new Relations();
            relations.RelationId = relationId;
            return relations;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 RelationId
        {
            get
            {
                return _RelationId;
            }
            set
            {
                if (_RelationId != value)
                {
                    OnRelationIdChanging(value);
                    ReportPropertyChanging("RelationId");
                    _RelationId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RelationId");
                    OnRelationIdChanged();
                }
            }
        }
        private global::System.Int64 _RelationId;
        partial void OnRelationIdChanging(global::System.Int64 value);
        partial void OnRelationIdChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("KazMapContext", "FK_RelationNodes_RelationId_Relations", "RelationNodes")]
        public EntityCollection<RelationNodes> Nodes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RelationNodes>("KazMapContext.FK_RelationNodes_RelationId_Relations", "RelationNodes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RelationNodes>("KazMapContext.FK_RelationNodes_RelationId_Relations", "RelationNodes", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("KazMapContext", "FK_RelationTags_RelationId_Relations", "RelationTags")]
        public EntityCollection<RelationTags> Tags
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RelationTags>("KazMapContext.FK_RelationTags_RelationId_Relations", "RelationTags");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RelationTags>("KazMapContext.FK_RelationTags_RelationId_Relations", "RelationTags", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="KazMapContext", Name="RelationTags")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RelationTags : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта RelationTags.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        public static RelationTags CreateRelationTags(global::System.Int64 id)
        {
            RelationTags relationTags = new RelationTags();
            relationTags.Id = id;
            return relationTags;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private global::System.String _Value;
        partial void OnValueChanging(global::System.String value);
        partial void OnValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> TypeId
        {
            get
            {
                return _TypeId;
            }
            set
            {
                OnTypeIdChanging(value);
                ReportPropertyChanging("TypeId");
                _TypeId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TypeId");
                OnTypeIdChanged();
            }
        }
        private Nullable<global::System.Int64> _TypeId;
        partial void OnTypeIdChanging(Nullable<global::System.Int64> value);
        partial void OnTypeIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> RelationId
        {
            get
            {
                return _RelationId;
            }
            set
            {
                OnRelationIdChanging(value);
                ReportPropertyChanging("RelationId");
                _RelationId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RelationId");
                OnRelationIdChanged();
            }
        }
        private Nullable<global::System.Int64> _RelationId;
        partial void OnRelationIdChanging(Nullable<global::System.Int64> value);
        partial void OnRelationIdChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("KazMapContext", "FK_RelationTags_RelationId_Relations", "Relations")]
        public Relations Relation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Relations>("KazMapContext.FK_RelationTags_RelationId_Relations", "Relations").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Relations>("KazMapContext.FK_RelationTags_RelationId_Relations", "Relations").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Relations> RelationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Relations>("KazMapContext.FK_RelationTags_RelationId_Relations", "Relations");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Relations>("KazMapContext.FK_RelationTags_RelationId_Relations", "Relations", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("KazMapContext", "FK_RelationTags_TypeId_TagTypes", "TagTypes")]
        public TagTypes Type
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TagTypes>("KazMapContext.FK_RelationTags_TypeId_TagTypes", "TagTypes").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TagTypes>("KazMapContext.FK_RelationTags_TypeId_TagTypes", "TagTypes").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TagTypes> TypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TagTypes>("KazMapContext.FK_RelationTags_TypeId_TagTypes", "TagTypes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<TagTypes>("KazMapContext.FK_RelationTags_TypeId_TagTypes", "TagTypes", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="KazMapContext", Name="Roads")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Roads : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Roads.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        public static Roads CreateRoads(global::System.Int64 id)
        {
            Roads roads = new Roads();
            roads.Id = id;
            return roads;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Category
        {
            get
            {
                return _Category;
            }
            set
            {
                OnCategoryChanging(value);
                ReportPropertyChanging("Category");
                _Category = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Category");
                OnCategoryChanged();
            }
        }
        private global::System.String _Category;
        partial void OnCategoryChanging(global::System.String value);
        partial void OnCategoryChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> MaxSpeed
        {
            get
            {
                return _MaxSpeed;
            }
            set
            {
                OnMaxSpeedChanging(value);
                ReportPropertyChanging("MaxSpeed");
                _MaxSpeed = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MaxSpeed");
                OnMaxSpeedChanged();
            }
        }
        private Nullable<global::System.Int32> _MaxSpeed;
        partial void OnMaxSpeedChanging(Nullable<global::System.Int32> value);
        partial void OnMaxSpeedChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> WayId
        {
            get
            {
                return _WayId;
            }
            set
            {
                OnWayIdChanging(value);
                ReportPropertyChanging("WayId");
                _WayId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WayId");
                OnWayIdChanged();
            }
        }
        private Nullable<global::System.Int64> _WayId;
        partial void OnWayIdChanging(Nullable<global::System.Int64> value);
        partial void OnWayIdChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("KazMapContext", "FK_Roads_WayId_Ways", "Ways")]
        public Ways Way
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ways>("KazMapContext.FK_Roads_WayId_Ways", "Ways").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ways>("KazMapContext.FK_Roads_WayId_Ways", "Ways").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Ways> WayReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ways>("KazMapContext.FK_Roads_WayId_Ways", "Ways");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Ways>("KazMapContext.FK_Roads_WayId_Ways", "Ways", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="KazMapContext", Name="TagTypes")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TagTypes : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта TagTypes.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        public static TagTypes CreateTagTypes(global::System.Int64 id)
        {
            TagTypes tagTypes = new TagTypes();
            tagTypes.Id = id;
            return tagTypes;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="KazMapContext", Name="WayNames")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WayNames : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WayNames.
        /// </summary>
        /// <param name="nameId">Исходное значение свойства NameId.</param>
        public static WayNames CreateWayNames(global::System.Int64 nameId)
        {
            WayNames wayNames = new WayNames();
            wayNames.NameId = nameId;
            return wayNames;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 NameId
        {
            get
            {
                return _NameId;
            }
            set
            {
                if (_NameId != value)
                {
                    OnNameIdChanging(value);
                    ReportPropertyChanging("NameId");
                    _NameId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("NameId");
                    OnNameIdChanged();
                }
            }
        }
        private global::System.Int64 _NameId;
        partial void OnNameIdChanging(global::System.Int64 value);
        partial void OnNameIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private global::System.String _Value;
        partial void OnValueChanging(global::System.String value);
        partial void OnValueChanged();

        #endregion
    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="KazMapContext", Name="WayNamesReferences")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WayNamesReferences : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WayNamesReferences.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        public static WayNamesReferences CreateWayNamesReferences(global::System.Int64 id)
        {
            WayNamesReferences wayNamesReferences = new WayNamesReferences();
            wayNamesReferences.Id = id;
            return wayNamesReferences;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> WayId
        {
            get
            {
                return _WayId;
            }
            set
            {
                OnWayIdChanging(value);
                ReportPropertyChanging("WayId");
                _WayId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WayId");
                OnWayIdChanged();
            }
        }
        private Nullable<global::System.Int64> _WayId;
        partial void OnWayIdChanging(Nullable<global::System.Int64> value);
        partial void OnWayIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> NameId
        {
            get
            {
                return _NameId;
            }
            set
            {
                OnNameIdChanging(value);
                ReportPropertyChanging("NameId");
                _NameId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("NameId");
                OnNameIdChanged();
            }
        }
        private Nullable<global::System.Int64> _NameId;
        partial void OnNameIdChanging(Nullable<global::System.Int64> value);
        partial void OnNameIdChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("KazMapContext", "FK_WayNamesReferences_NameId_WayNames", "WayNames")]
        public WayNames Name
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WayNames>("KazMapContext.FK_WayNamesReferences_NameId_WayNames", "WayNames").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WayNames>("KazMapContext.FK_WayNamesReferences_NameId_WayNames", "WayNames").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WayNames> NameReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WayNames>("KazMapContext.FK_WayNamesReferences_NameId_WayNames", "WayNames");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WayNames>("KazMapContext.FK_WayNamesReferences_NameId_WayNames", "WayNames", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("KazMapContext", "FK_WayNamesReferences_WayId_Ways", "Ways")]
        public Ways Way
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ways>("KazMapContext.FK_WayNamesReferences_WayId_Ways", "Ways").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ways>("KazMapContext.FK_WayNamesReferences_WayId_Ways", "Ways").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Ways> WayReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ways>("KazMapContext.FK_WayNamesReferences_WayId_Ways", "Ways");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Ways>("KazMapContext.FK_WayNamesReferences_WayId_Ways", "Ways", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="KazMapContext", Name="WayNodes")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WayNodes : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WayNodes.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        public static WayNodes CreateWayNodes(global::System.Int64 id)
        {
            WayNodes wayNodes = new WayNodes();
            wayNodes.Id = id;
            return wayNodes;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Position
        {
            get
            {
                return _Position;
            }
            set
            {
                OnPositionChanging(value);
                ReportPropertyChanging("Position");
                _Position = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Position");
                OnPositionChanged();
            }
        }
        private Nullable<global::System.Int32> _Position;
        partial void OnPositionChanging(Nullable<global::System.Int32> value);
        partial void OnPositionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> NodeId
        {
            get
            {
                return _NodeId;
            }
            set
            {
                OnNodeIdChanging(value);
                ReportPropertyChanging("NodeId");
                _NodeId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("NodeId");
                OnNodeIdChanged();
            }
        }
        private Nullable<global::System.Int64> _NodeId;
        partial void OnNodeIdChanging(Nullable<global::System.Int64> value);
        partial void OnNodeIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> WayId
        {
            get
            {
                return _WayId;
            }
            set
            {
                OnWayIdChanging(value);
                ReportPropertyChanging("WayId");
                _WayId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WayId");
                OnWayIdChanged();
            }
        }
        private Nullable<global::System.Int64> _WayId;
        partial void OnWayIdChanging(Nullable<global::System.Int64> value);
        partial void OnWayIdChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("KazMapContext", "FK_WayNodes_NodeId_Nodes", "Nodes")]
        public Nodes Node
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Nodes>("KazMapContext.FK_WayNodes_NodeId_Nodes", "Nodes").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Nodes>("KazMapContext.FK_WayNodes_NodeId_Nodes", "Nodes").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Nodes> NodeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Nodes>("KazMapContext.FK_WayNodes_NodeId_Nodes", "Nodes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Nodes>("KazMapContext.FK_WayNodes_NodeId_Nodes", "Nodes", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("KazMapContext", "FK_WayNodes_WayId_Ways", "Ways")]
        public Ways Way
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ways>("KazMapContext.FK_WayNodes_WayId_Ways", "Ways").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ways>("KazMapContext.FK_WayNodes_WayId_Ways", "Ways").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Ways> WayReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ways>("KazMapContext.FK_WayNodes_WayId_Ways", "Ways");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Ways>("KazMapContext.FK_WayNodes_WayId_Ways", "Ways", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="KazMapContext", Name="Ways")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Ways : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Ways.
        /// </summary>
        /// <param name="wayId">Исходное значение свойства WayId.</param>
        public static Ways CreateWays(global::System.Int64 wayId)
        {
            Ways ways = new Ways();
            ways.WayId = wayId;
            return ways;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 WayId
        {
            get
            {
                return _WayId;
            }
            set
            {
                if (_WayId != value)
                {
                    OnWayIdChanging(value);
                    ReportPropertyChanging("WayId");
                    _WayId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("WayId");
                    OnWayIdChanged();
                }
            }
        }
        private global::System.Int64 _WayId;
        partial void OnWayIdChanging(global::System.Int64 value);
        partial void OnWayIdChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("KazMapContext", "FK_WayNodes_WayId_Ways", "WayNodes")]
        public EntityCollection<WayNodes> Nodes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WayNodes>("KazMapContext.FK_WayNodes_WayId_Ways", "WayNodes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WayNodes>("KazMapContext.FK_WayNodes_WayId_Ways", "WayNodes", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("KazMapContext", "FK_WayTags_WayId_Ways", "WayTags")]
        public EntityCollection<WayTags> Tags
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WayTags>("KazMapContext.FK_WayTags_WayId_Ways", "WayTags");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WayTags>("KazMapContext.FK_WayTags_WayId_Ways", "WayTags", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("KazMapContext", "FK_WayNamesReferences_WayId_Ways", "WayNamesReferences")]
        public EntityCollection<WayNamesReferences> WayNamesReferences
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WayNamesReferences>("KazMapContext.FK_WayNamesReferences_WayId_Ways", "WayNamesReferences");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WayNamesReferences>("KazMapContext.FK_WayNamesReferences_WayId_Ways", "WayNamesReferences", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="KazMapContext", Name="WayTags")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WayTags : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WayTags.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        public static WayTags CreateWayTags(global::System.Int64 id)
        {
            WayTags wayTags = new WayTags();
            wayTags.Id = id;
            return wayTags;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private global::System.String _Value;
        partial void OnValueChanging(global::System.String value);
        partial void OnValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> TypeId
        {
            get
            {
                return _TypeId;
            }
            set
            {
                OnTypeIdChanging(value);
                ReportPropertyChanging("TypeId");
                _TypeId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TypeId");
                OnTypeIdChanged();
            }
        }
        private Nullable<global::System.Int64> _TypeId;
        partial void OnTypeIdChanging(Nullable<global::System.Int64> value);
        partial void OnTypeIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> WayId
        {
            get
            {
                return _WayId;
            }
            set
            {
                OnWayIdChanging(value);
                ReportPropertyChanging("WayId");
                _WayId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WayId");
                OnWayIdChanged();
            }
        }
        private Nullable<global::System.Int64> _WayId;
        partial void OnWayIdChanging(Nullable<global::System.Int64> value);
        partial void OnWayIdChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("KazMapContext", "FK_WayTags_TypeId_TagTypes", "TagTypes")]
        public TagTypes Type
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TagTypes>("KazMapContext.FK_WayTags_TypeId_TagTypes", "TagTypes").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TagTypes>("KazMapContext.FK_WayTags_TypeId_TagTypes", "TagTypes").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TagTypes> TypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TagTypes>("KazMapContext.FK_WayTags_TypeId_TagTypes", "TagTypes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<TagTypes>("KazMapContext.FK_WayTags_TypeId_TagTypes", "TagTypes", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("KazMapContext", "FK_WayTags_WayId_Ways", "Ways")]
        public Ways Way
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ways>("KazMapContext.FK_WayTags_WayId_Ways", "Ways").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ways>("KazMapContext.FK_WayTags_WayId_Ways", "Ways").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Ways> WayReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ways>("KazMapContext.FK_WayTags_WayId_Ways", "Ways");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Ways>("KazMapContext.FK_WayTags_WayId_Ways", "Ways", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
